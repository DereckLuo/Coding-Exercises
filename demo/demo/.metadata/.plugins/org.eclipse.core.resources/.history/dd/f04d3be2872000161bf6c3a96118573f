/*class Shape{
	void draw(){
		System.out.println("Drawing a Shape");
	}
}*/

/*abstract class Shape{ // It is a class for which a user cannot create objects
	abstract void draw(); // It is a function which will have no body // It can only be declared in an abstract class
	
	void fun(){ // Regular Functions or Concrete Function
		System.out.println("This is fun");
	}
}*/
// Abstract class is a singleton pattern -> it means only a single object shall be created for inheritance in the background

interface Shape{ // An interface -> It has no objects -> It cannot be instantiated 
	void draw(); // by default public abstract -> public abstract void draw();
	//int a = 10;  // public static final -> public static final int a = 10;
}


class Circle implements Shape{//extends Shape{ // IS-A
	void draw(){
		System.out.println("Drawing a Circle");
	}
}

class Rectangle implements Shape{//extends Shape{
	void draw(){
		System.out.println("Drawing a Rectangle");
	}
}

class Polygon implements Shape{//extends Shape{
	void draw(){
		System.out.println("Drawing a Polygon");
	}
}

public class InfDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Shape s; // Need not to have objects of Shape
				 // Definition of draw function in shape is not required
		
		s = new Circle();
		s.draw();
		
		s = new Rectangle();
		s.draw();
		
		s = new Polygon();
		s.draw();

	}

}
